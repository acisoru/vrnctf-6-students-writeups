// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: proto/service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WatermarkServiceClient is the client API for WatermarkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WatermarkServiceClient interface {
	AddWatermark(ctx context.Context, in *AddWatermarkRequest, opts ...grpc.CallOption) (*AddWatermarkResponse, error)
	ExploitMe(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandResponse, error)
}

type watermarkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWatermarkServiceClient(cc grpc.ClientConnInterface) WatermarkServiceClient {
	return &watermarkServiceClient{cc}
}

func (c *watermarkServiceClient) AddWatermark(ctx context.Context, in *AddWatermarkRequest, opts ...grpc.CallOption) (*AddWatermarkResponse, error) {
	out := new(AddWatermarkResponse)
	err := c.cc.Invoke(ctx, "/main.WatermarkService/AddWatermark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watermarkServiceClient) ExploitMe(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandResponse, error) {
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, "/main.WatermarkService/ExploitMe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WatermarkServiceServer is the server API for WatermarkService service.
// All implementations must embed UnimplementedWatermarkServiceServer
// for forward compatibility
type WatermarkServiceServer interface {
	AddWatermark(context.Context, *AddWatermarkRequest) (*AddWatermarkResponse, error)
	ExploitMe(context.Context, *Command) (*CommandResponse, error)
	mustEmbedUnimplementedWatermarkServiceServer()
}

// UnimplementedWatermarkServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWatermarkServiceServer struct {
}

func (UnimplementedWatermarkServiceServer) AddWatermark(context.Context, *AddWatermarkRequest) (*AddWatermarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWatermark not implemented")
}
func (UnimplementedWatermarkServiceServer) ExploitMe(context.Context, *Command) (*CommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExploitMe not implemented")
}
func (UnimplementedWatermarkServiceServer) mustEmbedUnimplementedWatermarkServiceServer() {}

// UnsafeWatermarkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WatermarkServiceServer will
// result in compilation errors.
type UnsafeWatermarkServiceServer interface {
	mustEmbedUnimplementedWatermarkServiceServer()
}

func RegisterWatermarkServiceServer(s grpc.ServiceRegistrar, srv WatermarkServiceServer) {
	s.RegisterService(&WatermarkService_ServiceDesc, srv)
}

func _WatermarkService_AddWatermark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWatermarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatermarkServiceServer).AddWatermark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.WatermarkService/AddWatermark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatermarkServiceServer).AddWatermark(ctx, req.(*AddWatermarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatermarkService_ExploitMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatermarkServiceServer).ExploitMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.WatermarkService/ExploitMe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatermarkServiceServer).ExploitMe(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

// WatermarkService_ServiceDesc is the grpc.ServiceDesc for WatermarkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WatermarkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.WatermarkService",
	HandlerType: (*WatermarkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddWatermark",
			Handler:    _WatermarkService_AddWatermark_Handler,
		},
		{
			MethodName: "ExploitMe",
			Handler:    _WatermarkService_ExploitMe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}
